import React, { useEffect } from 'react'
import DocumentTitle from 'react-document-title'
import { PAGE_TITLE } from '@constants/pageTitle'
import { {{upperCase name}}_PAGE_LABELS } from '@constants/{{lowerCase name}}PageLabels'
import { useAdobeAnalytics } from '@hooks/useAdobeAnalytics'
import { useNormaContext } from '@hooks/useNormaContext'
import { useDocuments } from '@hooks/useDocuments'
import { use{{upperCase name}}PageController } from '@hooks/use{{upperCase name}}PageController'
import HeaderForm from '@organisms/HeaderForm'
import OnBoarding from '@organisms/OnBoarding'
import InformationApplication from '@organisms/InformationApplication'
import UploadFileWithTips from '@organisms/UploadFileWithTips'
import RequestReceived from '@organisms/RequestReceived'
import ApplicantInformationForm from '@organisms/Forms/ApplicantInformationForm'
import { DocumentOwnerType } from '@storage/interfaces/normaTypes'
import '@templates/{{lowerCase name}}/{{upperCase name}}.scss'

const {{upperCase name}} = () => {
    const { registerViewData } = useAdobeAnalytics()
    const { normaState } = useNormaContext()
    const {
        applicantDocuments,
        applicantInformation,
        formStep,
        interestedDocuments,
        interestedInformation,
        onboarding,
    } = normaState
    const {
        backButtonHandler,
        forwardButtonHandler,
        uploadFileListHandler,
        editApplicantInformation,
        editApplicantDocuments,
        editInterestedInformation,
        editInterestedDocuments,
    } = use{{upperCase name}}PageController()
    const {
        getApplicantDocument,
        getInterestedDocument,
        updateApplicantDocuments,
        updateInterestedDocuments,
        validateApplicantDocuments,
        validateInterestedDocuments,
    } = useDocuments()

    useEffect(() => {
        registerViewData('{{upperCase name}}', 'page')
    }, [])

    const stepViewManager = () => {
        switch (formStep) {
            case 0:
                return (
                    <section>
                        <OnBoarding
                            title=""
                            onSubmit={forwardButtonHandler}
                            urlHelp={{{upperCase name}}_PAGE_LABELS.ONBOARDING.URL_HELP}
                            userProfiles={
                                {{upperCase name}}_PAGE_LABELS.ONBOARDING.USER_PROFILES
                            }
                        />
                    </section>
                )
            case 1:
                return (
                    <section>
                        <ApplicantInformationForm
                            key={formStep}
                            defaultValues={{
                                rut: onboarding?.rut ?? '',
                                names: applicantInformation?.name ?? '',
                                lastNames: applicantInformation?.lastName ?? '',
                                email: applicantInformation?.email ?? '',
                                phone:
                                    applicantInformation?.movil?.toString() ??
                                    '',
                            }}
                            onSubmit={forwardButtonHandler}
                            onGoBack={backButtonHandler}
                            applicant={
                                {{upperCase name}}_PAGE_LABELS.ONBOARDING.USER_PROFILES.find(
                                    profile =>
                                        profile.value ===
                                        onboarding?.userProfile,
                                )?.label ?? ''
                            }
                        />
                    </section>
                )
            case 2:
                return (
                    <section>
                        <UploadFileWithTips
                            key={formStep}
                            containerList={uploadFileListHandler(
                                onboarding?.userProfile ?? '',
                            )}
                            owner={onboarding?.userProfile as DocumentOwnerType}
                            // Para que el upload pueda recuperar el archivo que le corresponde
                            getFile={getApplicantDocument}
                            // lógica para deshabilitar el botón de siguiente si no estan todo los archivos
                            nextButtonStatus={validateApplicantDocuments}
                            // Funcion para regresar un paso del formulario
                            onGoBackModal={backButtonHandler}
                            // Funcion para continuar un paso del formulario
                            onClickContinueButton={forwardButtonHandler}
                            // Enviar archivos según sea el perfil
                            uploadFile={updateApplicantDocuments}
                        />
                    </section>
                )
            case 3:
                return onboarding?.rutRepresented ? (
                    <section>
                        <ApplicantInformationForm
                            key={formStep}
                            defaultValues={{
                                rut: onboarding?.rutRepresented ?? '',
                                names: interestedInformation?.name ?? '',
                                lastNames:
                                    interestedInformation?.lastName ?? '',
                                email: interestedInformation?.email ?? '',
                                phone:
                                    interestedInformation?.movil?.toString() ??
                                    '',
                            }}
                            onSubmit={forwardButtonHandler}
                            onGoBack={backButtonHandler}
                            applicant={
                                {{upperCase name}}_PAGE_LABELS.ONBOARDING.USER_PROFILES.find(
                                    profile =>
                                        profile.value ===
                                        onboarding?.userProfileRepresented,
                                )?.label ?? ''
                            }
                        />
                    </section>
                ) : null
            case 4:
                return onboarding?.rutRepresented ? (
                    <section>
                        <UploadFileWithTips
                            key={formStep}
                            containerList={uploadFileListHandler(
                                onboarding?.userProfileRepresented ?? '',
                            )}
                            owner={
                                onboarding?.userProfileRepresented as DocumentOwnerType
                            }
                            getFile={getInterestedDocument}
                            nextButtonStatus={validateInterestedDocuments}
                            onGoBackModal={backButtonHandler}
                            onClickContinueButton={forwardButtonHandler}
                            uploadFile={updateInterestedDocuments}
                        />
                    </section>
                ) : null
            case 5:
                return (
                    <section>
                        <InformationApplication
                            representativeProfile={
                                {{upperCase name}}_PAGE_LABELS.ONBOARDING.USER_PROFILES.find(
                                    profile =>
                                        profile.value ===
                                        onboarding?.userProfile,
                                )?.label ?? ''
                            }
                            representative={applicantInformation}
                            documentsRepresentative={applicantDocuments}
                            onEditInfoRepresentative={editApplicantInformation}
                            onEditDocumentRepresentative={
                                editApplicantDocuments
                            }
                            interestedProfile={
                                {{upperCase name}}_PAGE_LABELS.ONBOARDING.USER_PROFILES.find(
                                    profile =>
                                        profile.value ===
                                        onboarding?.userProfileRepresented,
                                )?.label ?? ''
                            }
                            interested={interestedInformation}
                            documentsInterested={applicantDocuments}
                            onEditInfoInterested={editApplicantInformation}
                            onEditDocumentInterested={editApplicantDocuments}
                            onCreateRequest={forwardButtonHandler}
                            onGoBack={backButtonHandler}
                            applicant="Solicitud"
                        />
                    </section>
                )
            case 6:
                return (
                    <section>
                        <RequestReceived
                            onDownloadReceipt={() => {}}
                            onShare={() => {}}
                        />
                    </section>
                )

            // Add more cases for each form step
            default:
                return null
        }
    }

    return (processing form
        <DocumentTitle title={PAGE_TITLE.{{upperCase name}}}>
            <div className="norma-{{lowerCase name}}Page-container">
                <HeaderForm
                    title={{{upperCase name}}_PAGE_LABELS.HEADER_FROM.TITLE}
                    helperText={{{upperCase name}}_PAGE_LABELS.HEADER_FROM.HELPER_TEXT}
                    hasHelperText={formStep === 0}
                    hasGoToStart={formStep !== 0}
                    hasTitle={formStep === 0}
                />
                <form>{stepViewManager()}</form>
            </div>
        </DocumentTitle>
    )
}

export default {{upperCase name}}
